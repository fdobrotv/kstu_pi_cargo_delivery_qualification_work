/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkSlot,
  WorkSlotIn,
} from '../models/index';
import {
    WorkSlotFromJSON,
    WorkSlotToJSON,
    WorkSlotInFromJSON,
    WorkSlotInToJSON,
} from '../models/index';

export interface CreateWorkSlotRequest {
    workSlotIn?: WorkSlotIn;
}

export interface DeleteWorkSlotByIdRequest {
    id: string;
}

export interface GetWorkSlotByIdRequest {
    id: string;
}

export interface ListWorkSlotsRequest {
    limit?: number;
}

/**
 * 
 */
export class WorkSlotsApi extends runtime.BaseAPI {

    /**
     * Create a work slot
     */
    async createWorkSlotRaw(requestParameters: CreateWorkSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkSlot>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workSlots`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkSlotInToJSON(requestParameters.workSlotIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkSlotFromJSON(jsonValue));
    }

    /**
     * Create a work slot
     */
    async createWorkSlot(requestParameters: CreateWorkSlotRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkSlot> {
        const response = await this.createWorkSlotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific work slot by id
     */
    async deleteWorkSlotByIdRaw(requestParameters: DeleteWorkSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWorkSlotById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workSlots/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific work slot by id
     */
    async deleteWorkSlotById(requestParameters: DeleteWorkSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkSlotByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Info for a specific work slot
     */
    async getWorkSlotByIdRaw(requestParameters: GetWorkSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkSlot>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkSlotById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workSlots/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkSlotFromJSON(jsonValue));
    }

    /**
     * Info for a specific work slot
     */
    async getWorkSlotById(requestParameters: GetWorkSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkSlot> {
        const response = await this.getWorkSlotByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all work slots
     */
    async listWorkSlotsRaw(requestParameters: ListWorkSlotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkSlot>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workSlots`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkSlotFromJSON));
    }

    /**
     * List all work slots
     */
    async listWorkSlots(requestParameters: ListWorkSlotsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkSlot>> {
        const response = await this.listWorkSlotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
