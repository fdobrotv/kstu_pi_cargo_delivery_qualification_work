/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Refuel,
  RefuelIn,
} from '../models/index';
import {
    RefuelFromJSON,
    RefuelToJSON,
    RefuelInFromJSON,
    RefuelInToJSON,
} from '../models/index';

export interface CreateRefuelRequest {
    refuelIn?: RefuelIn;
}

export interface DeleteRefuelByIdRequest {
    id: string;
}

export interface GetRefuelByIdRequest {
    id: string;
}

export interface ListRefuelsRequest {
    limit?: number;
}

/**
 * 
 */
export class RefuelsApi extends runtime.BaseAPI {

    /**
     * Create a refuel
     */
    async createRefuelRaw(requestParameters: CreateRefuelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Refuel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/refuels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefuelInToJSON(requestParameters.refuelIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefuelFromJSON(jsonValue));
    }

    /**
     * Create a refuel
     */
    async createRefuel(requestParameters: CreateRefuelRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Refuel> {
        const response = await this.createRefuelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific refuel by id
     */
    async deleteRefuelByIdRaw(requestParameters: DeleteRefuelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRefuelById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/refuels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific refuel by id
     */
    async deleteRefuelById(requestParameters: DeleteRefuelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRefuelByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Info for a specific refuel
     */
    async getRefuelByIdRaw(requestParameters: GetRefuelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Refuel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRefuelById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/refuels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefuelFromJSON(jsonValue));
    }

    /**
     * Info for a specific refuel
     */
    async getRefuelById(requestParameters: GetRefuelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Refuel> {
        const response = await this.getRefuelByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all refuels
     */
    async listRefuelsRaw(requestParameters: ListRefuelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Refuel>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/refuels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RefuelFromJSON));
    }

    /**
     * List all refuels
     */
    async listRefuels(requestParameters: ListRefuelsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Refuel>> {
        const response = await this.listRefuelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
