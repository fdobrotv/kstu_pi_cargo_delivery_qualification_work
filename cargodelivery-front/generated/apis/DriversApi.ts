/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Driver,
  DriverIn,
} from '../models/index';
import {
    DriverFromJSON,
    DriverToJSON,
    DriverInFromJSON,
    DriverInToJSON,
} from '../models/index';

export interface CreateDriverRequest {
    driverIn?: DriverIn;
}

export interface DeleteDriverByIdRequest {
    id: string;
}

export interface GetDriverByIdRequest {
    id: string;
}

export interface ListDriversRequest {
    limit?: number;
}

/**
 * 
 */
export class DriversApi extends runtime.BaseAPI {

    /**
     * Create a driver
     */
    async createDriverRaw(requestParameters: CreateDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Driver>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drivers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DriverInToJSON(requestParameters.driverIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DriverFromJSON(jsonValue));
    }

    /**
     * Create a driver
     */
    async createDriver(requestParameters: CreateDriverRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Driver> {
        const response = await this.createDriverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific driver by id
     */
    async deleteDriverByIdRaw(requestParameters: DeleteDriverByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDriverById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drivers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific driver by id
     */
    async deleteDriverById(requestParameters: DeleteDriverByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDriverByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Info for a specific driver
     */
    async getDriverByIdRaw(requestParameters: GetDriverByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Driver>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDriverById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drivers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DriverFromJSON(jsonValue));
    }

    /**
     * Info for a specific driver
     */
    async getDriverById(requestParameters: GetDriverByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Driver> {
        const response = await this.getDriverByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all drivers
     */
    async listDriversRaw(requestParameters: ListDriversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Driver>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drivers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DriverFromJSON));
    }

    /**
     * List all drivers
     */
    async listDrivers(requestParameters: ListDriversRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Driver>> {
        const response = await this.listDriversRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
