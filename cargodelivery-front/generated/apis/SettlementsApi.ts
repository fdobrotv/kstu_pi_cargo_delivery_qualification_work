/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Settlement,
  SettlementIn,
} from '../models/index';
import {
    SettlementFromJSON,
    SettlementToJSON,
    SettlementInFromJSON,
    SettlementInToJSON,
} from '../models/index';

export interface CreateSettlementRequest {
    settlementIn?: SettlementIn;
}

export interface DeleteSettlementByIdRequest {
    id: string;
}

export interface GetSettlementByIdRequest {
    id: string;
}

export interface ListSettlementsRequest {
    limit?: number;
}

/**
 * 
 */
export class SettlementsApi extends runtime.BaseAPI {

    /**
     * Create a settlement
     */
    async createSettlementRaw(requestParameters: CreateSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Settlement>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/settlements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettlementInToJSON(requestParameters.settlementIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettlementFromJSON(jsonValue));
    }

    /**
     * Create a settlement
     */
    async createSettlement(requestParameters: CreateSettlementRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Settlement> {
        const response = await this.createSettlementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific settlement by id
     */
    async deleteSettlementByIdRaw(requestParameters: DeleteSettlementByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSettlementById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settlements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific settlement by id
     */
    async deleteSettlementById(requestParameters: DeleteSettlementByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSettlementByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Info for a specific settlement
     */
    async getSettlementByIdRaw(requestParameters: GetSettlementByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Settlement>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSettlementById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settlements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettlementFromJSON(jsonValue));
    }

    /**
     * Info for a specific settlement
     */
    async getSettlementById(requestParameters: GetSettlementByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Settlement> {
        const response = await this.getSettlementByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all settlements
     */
    async listSettlementsRaw(requestParameters: ListSettlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Settlement>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settlements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SettlementFromJSON));
    }

    /**
     * List all settlements
     */
    async listSettlements(requestParameters: ListSettlementsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Settlement>> {
        const response = await this.listSettlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
