/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Incident,
  IncidentIn,
} from '../models/index';
import {
    IncidentFromJSON,
    IncidentToJSON,
    IncidentInFromJSON,
    IncidentInToJSON,
} from '../models/index';

export interface CreateIncidentRequest {
    incidentIn?: IncidentIn;
}

export interface DeleteIncidentByIdRequest {
    id: string;
}

export interface GetIncidentByIdRequest {
    id: string;
}

export interface ListIncidentsRequest {
    limit?: number;
}

/**
 * 
 */
export class IncidentsApi extends runtime.BaseAPI {

    /**
     * Create an incident
     */
    async createIncidentRaw(requestParameters: CreateIncidentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Incident>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/incidents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncidentInToJSON(requestParameters.incidentIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncidentFromJSON(jsonValue));
    }

    /**
     * Create an incident
     */
    async createIncident(requestParameters: CreateIncidentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Incident> {
        const response = await this.createIncidentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific incident by id
     */
    async deleteIncidentByIdRaw(requestParameters: DeleteIncidentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIncidentById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/incidents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific incident by id
     */
    async deleteIncidentById(requestParameters: DeleteIncidentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIncidentByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Info for a specific incident
     */
    async getIncidentByIdRaw(requestParameters: GetIncidentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Incident>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIncidentById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/incidents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncidentFromJSON(jsonValue));
    }

    /**
     * Info for a specific incident
     */
    async getIncidentById(requestParameters: GetIncidentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Incident> {
        const response = await this.getIncidentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all incidents
     */
    async listIncidentsRaw(requestParameters: ListIncidentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Incident>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/incidents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncidentFromJSON));
    }

    /**
     * List all incidents
     */
    async listIncidents(requestParameters: ListIncidentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Incident>> {
        const response = await this.listIncidentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
