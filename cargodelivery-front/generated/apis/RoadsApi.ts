/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Road,
  RoadIn,
} from '../models/index';
import {
    RoadFromJSON,
    RoadToJSON,
    RoadInFromJSON,
    RoadInToJSON,
} from '../models/index';

export interface CreateRoadRequest {
    roadIn?: RoadIn;
}

export interface DeleteRoadByIdRequest {
    id: string;
}

export interface GetRoadByIdRequest {
    id: string;
}

export interface ListRoadsRequest {
    limit?: number;
}

/**
 * 
 */
export class RoadsApi extends runtime.BaseAPI {

    /**
     * Create a road
     */
    async createRoadRaw(requestParameters: CreateRoadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Road>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoadInToJSON(requestParameters.roadIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoadFromJSON(jsonValue));
    }

    /**
     * Create a road
     */
    async createRoad(requestParameters: CreateRoadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Road> {
        const response = await this.createRoadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific food option by id
     */
    async deleteRoadByIdRaw(requestParameters: DeleteRoadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoadById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific food option by id
     */
    async deleteRoadById(requestParameters: DeleteRoadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRoadByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Info for a specific food option
     */
    async getRoadByIdRaw(requestParameters: GetRoadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Road>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoadById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoadFromJSON(jsonValue));
    }

    /**
     * Info for a specific food option
     */
    async getRoadById(requestParameters: GetRoadByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Road> {
        const response = await this.getRoadByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all roads
     */
    async listRoadsRaw(requestParameters: ListRoadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Road>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roads`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoadFromJSON));
    }

    /**
     * List all roads
     */
    async listRoads(requestParameters: ListRoadsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Road>> {
        const response = await this.listRoadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
