/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Way,
  WayIn,
} from '../models/index';
import {
    WayFromJSON,
    WayToJSON,
    WayInFromJSON,
    WayInToJSON,
} from '../models/index';

export interface CreateWayRequest {
    wayIn?: WayIn;
}

export interface DeleteWayByIdRequest {
    id: string;
}

export interface GetWayByIdRequest {
    id: string;
}

export interface ListWaysRequest {
    limit?: number;
}

/**
 * 
 */
export class WaysApi extends runtime.BaseAPI {

    /**
     * Create a way
     */
    async createWayRaw(requestParameters: CreateWayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Way>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WayInToJSON(requestParameters.wayIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WayFromJSON(jsonValue));
    }

    /**
     * Create a way
     */
    async createWay(requestParameters: CreateWayRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Way> {
        const response = await this.createWayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific way by id
     */
    async deleteWayByIdRaw(requestParameters: DeleteWayByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWayById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ways/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific way by id
     */
    async deleteWayById(requestParameters: DeleteWayByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWayByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Info for a specific way
     */
    async getWayByIdRaw(requestParameters: GetWayByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Way>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWayById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ways/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WayFromJSON(jsonValue));
    }

    /**
     * Info for a specific way
     */
    async getWayById(requestParameters: GetWayByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Way> {
        const response = await this.getWayByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all ways
     */
    async listWaysRaw(requestParameters: ListWaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Way>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ways`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WayFromJSON));
    }

    /**
     * List all ways
     */
    async listWays(requestParameters: ListWaysRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Way>> {
        const response = await this.listWaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
