/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FuelStation,
  FuelStationIn,
} from '../models/index';
import {
    FuelStationFromJSON,
    FuelStationToJSON,
    FuelStationInFromJSON,
    FuelStationInToJSON,
} from '../models/index';

export interface CreateFuelStationRequest {
    fuelStationIn?: FuelStationIn;
}

export interface DeleteFuelStationByIdRequest {
    id: string;
}

export interface GetFuelStationByIdRequest {
    id: string;
}

export interface ListFuelStationsRequest {
    limit?: number;
}

/**
 * 
 */
export class FuelStationsApi extends runtime.BaseAPI {

    /**
     * Create a fuel station
     */
    async createFuelStationRaw(requestParameters: CreateFuelStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FuelStation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fuelStations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FuelStationInToJSON(requestParameters.fuelStationIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FuelStationFromJSON(jsonValue));
    }

    /**
     * Create a fuel station
     */
    async createFuelStation(requestParameters: CreateFuelStationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FuelStation> {
        const response = await this.createFuelStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific fuel station by id
     */
    async deleteFuelStationByIdRaw(requestParameters: DeleteFuelStationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFuelStationById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fuelStations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific fuel station by id
     */
    async deleteFuelStationById(requestParameters: DeleteFuelStationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFuelStationByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Info for a specific fuel station
     */
    async getFuelStationByIdRaw(requestParameters: GetFuelStationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FuelStation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFuelStationById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fuelStations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FuelStationFromJSON(jsonValue));
    }

    /**
     * Info for a specific fuel station
     */
    async getFuelStationById(requestParameters: GetFuelStationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FuelStation> {
        const response = await this.getFuelStationByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all fuel stations
     */
    async listFuelStationsRaw(requestParameters: ListFuelStationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FuelStation>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fuelStations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FuelStationFromJSON));
    }

    /**
     * List all fuel stations
     */
    async listFuelStations(requestParameters: ListFuelStationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FuelStation>> {
        const response = await this.listFuelStationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
