/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Car } from './Car';
import {
    CarFromJSON,
    CarFromJSONTyped,
    CarToJSON,
} from './Car';
import type { Driver } from './Driver';
import {
    DriverFromJSON,
    DriverFromJSONTyped,
    DriverToJSON,
} from './Driver';
import type { Point } from './Point';
import {
    PointFromJSON,
    PointFromJSONTyped,
    PointToJSON,
} from './Point';

/**
 * 
 * @export
 * @interface Incident
 */
export interface Incident {
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    description: string;
    /**
     * 
     * @type {Date}
     * @memberof Incident
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Incident
     */
    dateTime: Date;
    /**
     * 
     * @type {Car}
     * @memberof Incident
     */
    car: Car;
    /**
     * 
     * @type {Driver}
     * @memberof Incident
     */
    driver: Driver;
    /**
     * 
     * @type {Point}
     * @memberof Incident
     */
    coordinates: Point;
}

/**
 * Check if a given object implements the Incident interface.
 */
export function instanceOfIncident(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "dateTime" in value;
    isInstance = isInstance && "car" in value;
    isInstance = isInstance && "driver" in value;
    isInstance = isInstance && "coordinates" in value;

    return isInstance;
}

export function IncidentFromJSON(json: any): Incident {
    return IncidentFromJSONTyped(json, false);
}

export function IncidentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Incident {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'description': json['description'],
        'createdAt': (new Date(json['createdAt'])),
        'dateTime': (new Date(json['dateTime'])),
        'car': CarFromJSON(json['car']),
        'driver': DriverFromJSON(json['driver']),
        'coordinates': PointFromJSON(json['coordinates']),
    };
}

export function IncidentToJSON(value?: Incident | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'description': value.description,
        'createdAt': (value.createdAt.toISOString()),
        'dateTime': (value.dateTime.toISOString()),
        'car': CarToJSON(value.car),
        'driver': DriverToJSON(value.driver),
        'coordinates': PointToJSON(value.coordinates),
    };
}

