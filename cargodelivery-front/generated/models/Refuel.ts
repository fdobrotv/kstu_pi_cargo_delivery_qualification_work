/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Car } from './Car';
import {
    CarFromJSON,
    CarFromJSONTyped,
    CarToJSON,
} from './Car';
import type { Driver } from './Driver';
import {
    DriverFromJSON,
    DriverFromJSONTyped,
    DriverToJSON,
} from './Driver';
import type { FuelStation } from './FuelStation';
import {
    FuelStationFromJSON,
    FuelStationFromJSONTyped,
    FuelStationToJSON,
} from './FuelStation';

/**
 * 
 * @export
 * @interface Refuel
 */
export interface Refuel {
    /**
     * 
     * @type {string}
     * @memberof Refuel
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Refuel
     */
    price: number;
    /**
     * 
     * @type {Date}
     * @memberof Refuel
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Refuel
     */
    dateTime: Date;
    /**
     * 
     * @type {FuelStation}
     * @memberof Refuel
     */
    fuelStation: FuelStation;
    /**
     * 
     * @type {Car}
     * @memberof Refuel
     */
    car: Car;
    /**
     * 
     * @type {Driver}
     * @memberof Refuel
     */
    driver: Driver;
}

/**
 * Check if a given object implements the Refuel interface.
 */
export function instanceOfRefuel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "dateTime" in value;
    isInstance = isInstance && "fuelStation" in value;
    isInstance = isInstance && "car" in value;
    isInstance = isInstance && "driver" in value;

    return isInstance;
}

export function RefuelFromJSON(json: any): Refuel {
    return RefuelFromJSONTyped(json, false);
}

export function RefuelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Refuel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'price': json['price'],
        'createdAt': (new Date(json['createdAt'])),
        'dateTime': (new Date(json['dateTime'])),
        'fuelStation': FuelStationFromJSON(json['fuelStation']),
        'car': CarFromJSON(json['car']),
        'driver': DriverFromJSON(json['driver']),
    };
}

export function RefuelToJSON(value?: Refuel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'price': value.price,
        'createdAt': (value.createdAt.toISOString()),
        'dateTime': (value.dateTime.toISOString()),
        'fuelStation': FuelStationToJSON(value.fuelStation),
        'car': CarToJSON(value.car),
        'driver': DriverToJSON(value.driver),
    };
}

