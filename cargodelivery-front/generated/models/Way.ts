/* tslint:disable */
/* eslint-disable */
/**
 * Cargo delivery
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Road } from './Road';
import {
    RoadFromJSON,
    RoadFromJSONTyped,
    RoadToJSON,
} from './Road';
import type { Settlement } from './Settlement';
import {
    SettlementFromJSON,
    SettlementFromJSONTyped,
    SettlementToJSON,
} from './Settlement';

/**
 * 
 * @export
 * @interface Way
 */
export interface Way {
    /**
     * 
     * @type {string}
     * @memberof Way
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Way
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Way
     */
    description: string;
    /**
     * 
     * @type {Settlement}
     * @memberof Way
     */
    departureSettlement: Settlement;
    /**
     * 
     * @type {Settlement}
     * @memberof Way
     */
    destinationSettlement: Settlement;
    /**
     * 
     * @type {Array<Road>}
     * @memberof Way
     */
    roads?: Array<Road>;
}

/**
 * Check if a given object implements the Way interface.
 */
export function instanceOfWay(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "departureSettlement" in value;
    isInstance = isInstance && "destinationSettlement" in value;

    return isInstance;
}

export function WayFromJSON(json: any): Way {
    return WayFromJSONTyped(json, false);
}

export function WayFromJSONTyped(json: any, ignoreDiscriminator: boolean): Way {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'departureSettlement': SettlementFromJSON(json['departureSettlement']),
        'destinationSettlement': SettlementFromJSON(json['destinationSettlement']),
        'roads': !exists(json, 'roads') ? undefined : ((json['roads'] as Array<any>).map(RoadFromJSON)),
    };
}

export function WayToJSON(value?: Way | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'departureSettlement': SettlementToJSON(value.departureSettlement),
        'destinationSettlement': SettlementToJSON(value.destinationSettlement),
        'roads': value.roads === undefined ? undefined : ((value.roads as Array<any>).map(RoadToJSON)),
    };
}

